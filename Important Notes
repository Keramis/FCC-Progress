--IMPORTED FROM LOCAL NOTES--

Important stuff from HTML freecodecamp:
> Putting "#<id>" in an HREF in <a> element makes you go to that ID in the page.
> Putting "#" in an HREF in <a> element makes a dead link.
> Putting "_blank" in a TARGET in <a> element makes that link open a new tab.
> Putting an image element in <a> element makes that image now a link.
> Radio button (input type "radio) is a button that deselects buttons that have the same group, or "name".
This, for example: <input type="radio" name="indoor-outdoor"> This "name" attribute is needed for radio buttons
that you need deselected from one another.
>>Usually, radio buttons are within a <label>. This label should have the same ID as the input, so that
enhancing software can catch it. For IDs on LABELS, you need a "for" element. Example: <label for="<nameofID>">

CSS:
> .<input> is for class, while;
>> <type>.<input> will only CSS for that class of that input. Example:
	(p.center) will only apply to paragraphs that have the "center" class.
> #<input> is for ID.
> * is a universal selector. Ex: * {something} will make it for all.
> <type> is a selector for all that type.
	Ex: p {something} will apply to all paragraphs.
> Apply multiple classes just by adding a space in between.
	Ex: <img class="class1 class2">
> An ID is more important than a class, so if a class and ID have differing
	elements, the ID CSS will take priority.
> Padding works clockwise, so you don't have to do "padding-top", "padding-right"
	and so on. Instead, just do: (padding: 1px 2px 3px 4px) these work clockwise,
	e.g. top, right, bottom, left.
>> Margin works the same way, clockwise.
> Selecting all that match an attribute 'type' is done:
	[type='<type>'] {something}
	e.g. done with buttons like this:
	[type='radio'] {something} to select all radio buttons.
> CSS classes override each other by their sequence; so in the styles, if it looks like:
	class1{}
	class2{}
	class 2 will override class1.
> CSS IDs override classes.
> You can force override by using "!important":
	thing{color: red !important;}
> CSS classes can be defined as such:
	--<var>: <value>;
	example: --penguin-skin: gray;
> CSS variables can be called as such:
	<thing>: var(<var>);
	example: background: var(--penguin-skin)
> You can create a fallback on a variable just like with fonts.
	Example: background: var(--penguin-skin, black);
	just put a comma for fallback.
>> Fallbacks for older browsers can be created if they don't support variables.
	This is very simple. Just put the fallback BEFORE the variable, and, since CSS
	is sequential, if the browser sees the variable, it overrides the previous fallback.
	If it doesn't, it applies the fallback.
> By creating CSS variables in the :root ""pseudo-class"", they will be available to access
	globally and from any other selector in the style sheet.
	Ex: :root {--var1: <value>;}
>> Over-write the root variables by setting them within a specific element.
	Ex: :root {--penguin-belly: pink;}
		.penguin {--penguin-belly: white;}

--END OF IMPORTED--
> Box shadow, some are optional options. Look it up.
> :hover is a pseudo-class selector. For example, if you want an effect
  when you hover over a link (anchor, or <a>), you could use:
  a:hover {something}
> (position: relative;) is very useful when wanting to position items.
  the code treats it as if it's still in it's default position, so other
  elements will behave the same. You can move the element with position
  relative with (left, right, top, and bottom). Example:
    p {position: relative; bottom: 10px;}
> (position: absolute;) locks the element in place relative to its parent
  container. !!IMPORTANT. For the parent container, make a (position) CSS
  (often with position: relative) or the browser will keep looking up the
  chain and end up with the <body> element to tag it to.
> (position: fixed;) locks the element in place relative to the entire
  browser window. !! This means it won't move, even if you scroll!
  (Navigation bar) Other elements won't realize it's there, so it 
  WILL overlap with others, since it doesn't exist for them.
> !!!VERY IMPORTANT: when elements are overlapping (i.e. using the (position)
  CSS), you can set different elements to overlap by using WHOLE NUMBERS (not decimals)
  by using the property (z-index: <value>). (Like the z-order in Geometry Dash)
> !!VERY IMPORTANT: Center a block element (like <div>) by using
  (margin: auto;).
> Navbars should have a similar but slightly different color that their respective
  elementt background to look good. This can be accomplished easily by using
  the (hsl(<value>, <percentage>, <percentage>)) element.
  h = hue (what color)
  s = saturation (how much gray) (100% fully saturated, full color)
  l = lightness (how much black or white) (50% normal color)
> !!VERY IMPORTANT: you can use gradients for an element. This is done with the
  "background" property of an element. Here's an example:
  (background: linear-gradient(35deg, #CCFFFF, #FFCCCC);)
  RAW: (background: linear-gradient(gradient_direction, color 1, color 2, color 3, ...);)
> ! The background property has the (url) option, which allows you to add texture to
  your background.
> With the (:hover) pseudo-class, you can make things bigger when you hover over them.
  Useful for makinging interactive buttons and such.
> All animation properties are very useful for making responsive webpages. Research them.
  They can be used with buttons, ex: if you hover over them
  (animation-fill-mode: forwards) can be used to make the animation stop at the end
  (like hovering over a button, not make the animation restart when it ends)
> <div> - groups content <section> - groups related content <article> - groups independent, self-contained content
> The value of the (for) attribute (on labels) must be the same as the value of the (id) attribute (on (input)) of the form control
> Use the (fieldset) and the (legend) tags for forms (radio buttons). Research this.
> Research the (display: flex) and (flex-direction). This is very useful for rows/columns.
